"""
Defines the interface for the handlers for the various TSEs
"""
import abc
import dataclasses


@dataclasses.dataclass
class Order:
    # client id of the PoS terminal from which the order originates
    client_id: str
    # order data to be signed
    data: bytes


@dataclasses.dataclass
class OrderSignature:
    signature_counter: int  # signature counter, as provided by the TSE
    signature: bytes  # signature, as generated by the TSE
    timestamp: str  # timestamp of the signature, as reported by the TSE


class TSEHandler(abc.ABC):
    """
    Abstract base class for various TSE handlers (e.g. DieboldNixdorfUSB, Dummy)
    """

    @abc.abstractmethod
    async def start(self):
        """
        Starts communication with the TSE
        """
        raise NotImplementedError()

    @abc.abstractmethod
    async def stop(self):
        """
        Stops communication with the TSE
        """
        raise NotImplementedError()

    @abc.abstractmethod
    async def reset(self):
        """
        Resets the connection to the TSE or the TSE itself to attempt and fix any errors
        that prevent it from being usable.

        This will be called by the TSEMuxer if the TSE times out on signature requests
        or if it produces some other errors.
        """
        raise NotImplementedError()

    @abc.abstractmethod
    async def register_client_id(self, client_id: str):
        """
        Registers a client ID with this TSE module.
        This enables the TSE to sign order for this client ID in the future.
        """
        raise NotImplementedError()

    @abc.abstractmethod
    async def deregister_client_id(self, client_id: str):
        """
        Deregisters a client ID from this TSE module.
        This means that the TSE will no longer be able to sign orders
        from this Client ID in the future.
        """

    @abc.abstractmethod
    async def sign_order(self, order: Order) -> OrderSignature:
        """
        Enqueues a signing request with this TSE.

        Returns the signature.
        """
        raise NotImplementedError()

    @abc.abstractmethod
    async def get_client_ids(self) -> list[str]:
        """
        Returns all registered client ids.
        """
        raise NotImplementedError()

    @abc.abstractmethod
    def __str__(self):
        raise NotImplementedError()
